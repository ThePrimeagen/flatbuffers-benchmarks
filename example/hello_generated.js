// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
*/
var Hello = Hello || {};

/**
 * @enum
 */
Hello.Type = {
  Hello: 0
};

/**
 * @constructor
 */
Hello.Hi = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Hello.Hi}
 */
Hello.Hi.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Hello.Hi=} obj
 * @returns {Hello.Hi}
 */
Hello.Hi.getRootAsHi = function(bb, obj) {
  return (obj || new Hello.Hi).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {Hello.Type}
 */
Hello.Hi.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {Hello.Type} */ (this.bb.readInt8(this.bb_pos + offset)) : Hello.Type.Hello;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
Hello.Hi.prototype.conversation = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
Hello.Hi.prototype.count = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Hello.Hi.startHi = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Hello.Type} type
 */
Hello.Hi.addType = function(builder, type) {
  builder.addFieldInt8(0, type, Hello.Type.Hello);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} conversationOffset
 */
Hello.Hi.addConversation = function(builder, conversationOffset) {
  builder.addFieldOffset(1, conversationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} count
 */
Hello.Hi.addCount = function(builder, count) {
  builder.addFieldInt32(2, count, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Hello.Hi.endHi = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
Hello.Hellos = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Hello.Hellos}
 */
Hello.Hellos.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Hello.Hellos=} obj
 * @returns {Hello.Hellos}
 */
Hello.Hellos.getRootAsHellos = function(bb, obj) {
  return (obj || new Hello.Hellos).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {Hello.Hi=} obj
 * @returns {Hello.Hi}
 */
Hello.Hellos.prototype.hiList = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Hello.Hi).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Hello.Hellos.prototype.hiListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Hello.Hellos.startHellos = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hiListOffset
 */
Hello.Hellos.addHiList = function(builder, hiListOffset) {
  builder.addFieldOffset(0, hiListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Hello.Hellos.createHiListVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Hello.Hellos.startHiListVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Hello.Hellos.endHellos = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Hello.Hellos.finishHellosBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.Hello = Hello;
