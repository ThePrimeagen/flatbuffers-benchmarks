// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
*/
var Hello = Hello || {};

/**
 * @enum
 */
Hello.Type = {
  Hello: 0
};

/**
 * @constructor
 */
Hello.Hi = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Hello.Hi}
 */
Hello.Hi.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Hello.Hi=} obj
 * @returns {Hello.Hi}
 */
Hello.Hi.getRootAsHi = function(bb, obj) {
  return (obj || new Hello.Hi).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {Hello.Type}
 */
Hello.Hi.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {Hello.Type} */ (this.bb.readInt8(this.bb_pos + offset)) : Hello.Type.Hello;
};

/**
 * @returns {number}
 */
Hello.Hi.prototype.count = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Hello.Hi.startHi = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Hello.Type} type
 */
Hello.Hi.addType = function(builder, type) {
  builder.addFieldInt8(0, type, Hello.Type.Hello);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} count
 */
Hello.Hi.addCount = function(builder, count) {
  builder.addFieldInt32(1, count, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Hello.Hi.endHi = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Hello.Hi.finishHiBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.Hello = Hello;
